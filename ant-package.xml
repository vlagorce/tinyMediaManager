<project name="Tiny Media Manager">

	<!-- build directories -->
	<property name="build.dir" value="target/ant" />
	<property name="lib.dir" value="${build.dir}/lib" />
	<property name="dist.dir" value="target/dist" />

	<!-- set as property to override in jenkins -->
	<property name="getdown" value="getdown.txt" />

	<path id="classpath.default">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<target name="setNightly" if="nightly">
		<property name="rev" value="nightly" />
	</target>
	<target name="setPreRelease" if="prerelease">
		<property name="rev" value="prerelease" />
	</target>

	<target name="checkArchitecture">

		<condition property="is64Bit">
			<equals arg1="${os.arch}" arg2="amd64"/>
		</condition>
	</target>
	
	<target name="launch4j64" depends="checkArchitecture" if="is64Bit">
		<chmod file="AppBundler/launch4j-x64/bin/windres" perm="ugo+rx" />
		<chmod file="AppBundler/launch4j-x64/bin/ld" perm="ugo+rx" />
		<taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="AppBundler/launch4j-x64/launch4j.jar:AppBundler/launch4j-x64/lib/xstream.jar" />
		<launch4j configFile="./AppBundler/launch4j.xml" txtProductVersion="${tmmVersion}_${tmmRevision}" outfile="${dist.dir}/win/tinyMediaManager.exe" />
		<launch4j configFile="./AppBundler/launch4jUpdater.xml" txtProductVersion="${tmmVersion}_${tmmRevision}" outfile="${dist.dir}/win/tinyMediaManagerUpd.exe" />
		<launch4j configFile="./AppBundler/launch4jcmd.xml" txtProductVersion="${tmmVersion}_${tmmRevision}" outfile="${dist.dir}/win/tinyMediaManagerCMD.exe" />
	</target>
	<target name="launch4j32" depends="checkArchitecture" unless="is64Bit">
		<chmod file="AppBundler/launch4j-x86/bin/windres" perm="ugo+rx" />
		<chmod file="AppBundler/launch4j-x86/bin/ld" perm="ugo+rx" />
		<taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="AppBundler/launch4j-x86/launch4j.jar:AppBundler/launch4j-x86/lib/xstream.jar" />
		<launch4j configFile="./AppBundler/launch4j.xml" txtProductVersion="${tmmVersion}_${tmmRevision}" outfile="${dist.dir}/win/tinyMediaManager.exe" />
		<launch4j configFile="./AppBundler/launch4jUpdater.xml" txtProductVersion="${tmmVersion}_${tmmRevision}" outfile="${dist.dir}/win/tinyMediaManagerUpd.exe" />
		<launch4j configFile="./AppBundler/launch4jcmd.xml" txtProductVersion="${tmmVersion}_${tmmRevision}" outfile="${dist.dir}/win/tinyMediaManagerCMD.exe" />
	</target>

    <target name="package-app" description="builds the packages" depends="setNightly, setPreRelease">
		<delete dir="${build.dir}" />
		<mkdir dir="${build.dir}" />
		<delete dir="${dist.dir}" />
		<mkdir dir="${dist.dir}/win" />

		<!-- set SVN revision here - is not set anymore since nightly/prerel -->
		<!-- Only works, if rev is not set to nightly/prerel - so should be fine for release build -->
		<echo message="Rev: ${rev}" />
		<property name="rev" value="${tmmRevision}" />
		<echo message="Rev: ${rev}" />

		<!-- buildinfo -->
		<propertyfile file="${build.dir}/version" comment="This file is automatically generated - DO NOT EDIT">
			<entry key="version" value="${tmmVersion}" />
			<entry key="build" value="${rev}" />
			<entry key="date" value="${tmmTimestamp}" />
		</propertyfile>

		<!-- ===================================================== -->
		<!-- default files, to include in DIST and GD -->
		<!-- ===================================================== -->
		<copy file="changelog.txt" todir="${build.dir}" />
		<copy file="AppBundler/${getdown}" tofile="${build.dir}/getdown.txt" />
		<copy file="LICENSE" todir="${build.dir}" />
		<copy file="AppBundler/splashscreen.png" todir="${build.dir}" />
		<copy file="AppBundler/progress.jpg" todir="${build.dir}" />
		<copy file="AppBundler/tmm.png" todir="${build.dir}" />
		<copy file="AppBundler/env.txt" todir="${build.dir}" />
		<copy file="target/${tmmName}-${tmmVersion}.jar" tofile="${build.dir}/tmm.jar" />

		<copy todir="${build.dir}/native">
			<fileset dir="native" />
		</copy>
		<copy todir="${build.dir}/templates">
			<fileset dir="templates" />
		</copy>
		<copy todir="${build.dir}/lib">
			<fileset dir="target/dependency" />
		</copy>
		<copy todir="${build.dir}/plugins">
			<fileset dir="target/dependency-plugins" />
		</copy>

		<!-- ===================================================== -->
		<!-- replace classpath -->
		<!-- ===================================================== -->
		<pathconvert property="gd.code" refid="classpath.default" pathsep="">
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<!-- remove absolute path -->
					<!-- add GD + lib/ prefix + newline ;) -->
					<globmapper from="*" to="code = lib/*${line.separator}" />
				</chainedmapper>
			</mapper>
		</pathconvert>
		<!--echo message="${gd.code}" /-->
		<replace file="${build.dir}/getdown.txt" token="%CODELIBS%" value="${gd.code}" />

		<!-- ===================================================== -->
		<!-- replace plugins -->
		<!-- ===================================================== -->
		<pathconvert property="gd.plugins" pathsep="">
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="*" to="resource = plugins/*${line.separator}" />
				</chainedmapper>
			</mapper>
			<path>
				<fileset dir="${build.dir}/plugins">
					<include name="*.jar" />
				</fileset>
			</path>
		</pathconvert>
		<!-- echo message="${gd.plugins}" /-->
		<replace file="${build.dir}/getdown.txt" token="%PLUGINS%" value="${gd.plugins}" />

		<!-- ===================================================== -->
		<!-- prepare build for MacOS X -->
		<!-- ===================================================== -->
		<copy todir="${dist.dir}/mac/tinyMediaManager.app/Contents">
			<fileset dir="AppBundler/dist-mac" />
		</copy>
		<replace file="${dist.dir}/mac/tinyMediaManager.app/Contents/Info.plist" token="%VERSION%" value="${tmmVersion}" />
		<replace file="${dist.dir}/mac/tinyMediaManager.app/Contents/Info.plist" token="%SVNREV%" value="${tmmRevision}" />
		<chmod file="${dist.dir}/mac/tinyMediaManager.app/Contents/MacOS/JavaApplicationStub" perm="ugo+rx" />
		<chmod file="${dist.dir}/mac/tinyMediaManager.app/Contents/Resources/Java/tinyMediaManagerOSX.sh" perm="ugo+rx" />
		<copy todir="${dist.dir}/mac/tinyMediaManager.app/Contents/Resources/Java/">
			<fileset dir="${build.dir}">
				<include name="**/*" />
				<exclude name="native/windows*/**" />
				<exclude name="native/linux*/**" />
			</fileset>
		</copy>
		<copy file="AppBundler/getdown.jar" todir="${dist.dir}/mac/tinyMediaManager.app/Contents/Resources/Java/" />

		<!-- ===================================================== -->
		<!-- prepare build for Windows -->
		<!-- ===================================================== -->
		<antcall target="launch4j32"/>
		<antcall target="launch4j64"/>
		<copy todir="${dist.dir}/win">
			<fileset dir="${build.dir}">
				<include name="**/*" />
				<exclude name="native/mac*/**" />
				<exclude name="native/linux*/**" />
			</fileset>
		</copy>
		<copy file="AppBundler/getdown.jar" todir="${dist.dir}/win" />

		<!-- ===================================================== -->
		<!-- prepare build for Linux -->
		<!-- ===================================================== -->
		<copy todir="${dist.dir}/linux">
			<fileset dir="AppBundler/dist-linux" />
		</copy>
		<chmod file="${dist.dir}/linux/tinyMediaManager.sh" perm="ugo+rx" />
		<chmod file="${dist.dir}/linux/tinyMediaManagerUpdater.sh" perm="ugo+rx" />
		<chmod file="${dist.dir}/linux/tinyMediaManagerCMD.sh" perm="ugo+rx" />
		<copy todir="${dist.dir}/linux">
			<fileset dir="${build.dir}">
				<include name="**/*" />
				<exclude name="native/mac*/**" />
				<exclude name="native/windows*/**" />
			</fileset>
		</copy>
		<copy file="AppBundler/getdown.jar" todir="${dist.dir}/linux" />

		<!-- ===================================================== -->
		<!-- default files, NOT to include in DIST, but in GD -->
		<!-- ===================================================== -->
		<copy file="${dist.dir}/win/tinyMediaManager.exe" tofile="${build.dir}/tinyMediaManager.new" />
		<copy file="${dist.dir}/win/tinyMediaManagerUpd.exe" tofile="${build.dir}/tinyMediaManagerUpd.new" />
		<copy file="${dist.dir}/win/tinyMediaManagerCMD.exe" tofile="${build.dir}/tinyMediaManagerCMD.new" />

		<copy file="${dist.dir}/linux/tinyMediaManager.sh" todir="${build.dir}" />
		<copy file="${dist.dir}/linux/tinyMediaManagerUpdater.sh" todir="${build.dir}" />
		<copy file="${dist.dir}/linux/tinyMediaManagerCMD.sh" todir="${build.dir}" />

		<copy file="${dist.dir}/mac/tinyMediaManager.app/Contents/Resources/Java/tinyMediaManagerOSX.sh" todir="${build.dir}" />
		<copy file="${dist.dir}/mac/tinyMediaManager.app/Contents/MacOS/JavaApplicationStub" tofile="${build.dir}/JavaApplicationStub.new" />
		<copy file="${dist.dir}/mac/tinyMediaManager.app/Contents/Info.plist" todir="${build.dir}" />

		<copy file="AppBundler/getdown.jar" tofile="${build.dir}/getdown-new.jar" />

		<!-- create webstart file (currently w/o plugins) -->
		<copy file="AppBundler/webstart.php" tofile="${build.dir}/webstart.php" />
		<pathconvert property="webstart" refid="classpath.default" pathsep="">
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="*" to="        &lt;jar href=&quot;lib/*&quot; />${line.separator}" />
				</chainedmapper>
			</mapper>
		</pathconvert>
		<!-- echo message="${webstart}" /-->
		<replace file="${build.dir}/webstart.php" token="%WEBSTARTLIBS%" value="${webstart}" />

		<!-- finally create checksums -->
		<taskdef name="digest" classname="com.threerings.getdown.tools.DigesterTask" classpath="AppBundler/getdown.jar" />
		<digest appdir="${build.dir}" />

		<!-- ===================================================== -->
		<!-- package for MacOS X -->
		<!-- ===================================================== -->
		<copy file="${build.dir}/digest.txt" todir="${dist.dir}/mac/tinyMediaManager.app/Contents/Resources/Java/" />
		<copy file="${build.dir}/digest2.txt" todir="${dist.dir}/mac/tinyMediaManager.app/Contents/Resources/Java/" />
		<zip destfile="${dist.dir}/tmm_${tmmVersion}_${tmmRevision}_mac.zip" level="9">
			<zipfileset dir="${dist.dir}/mac" excludes="**/JavaApplicationStub,**/tinyMediaManagerOSX.sh" />
			<zipfileset filemode="755" dir="${dist.dir}/mac" includes="**/JavaApplicationStub,**/tinyMediaManagerOSX.sh" />
		</zip>

		<!-- ===================================================== -->
		<!-- package for Windows -->
		<!-- ===================================================== -->
		<copy file="${build.dir}/digest.txt" todir="${dist.dir}/win" />
		<copy file="${build.dir}/digest2.txt" todir="${dist.dir}/win" />
		<zip destfile="${dist.dir}/tmm_${tmmVersion}_${tmmRevision}_win.zip" level="9">
			<zipfileset filemode="755" dir="${dist.dir}/win" />
		</zip>

		<!-- ===================================================== -->
		<!-- package for Linux -->
		<!-- ===================================================== -->
		<copy file="${build.dir}/digest.txt" todir="${dist.dir}/linux" />
		<copy file="${build.dir}/digest2.txt" todir="${dist.dir}/linux" />
		<tar compression="gzip" destfile="${dist.dir}/tmm_${tmmVersion}_${tmmRevision}_linux.tar.gz">
			<tarfileset dir="${dist.dir}/linux" excludes="*.sh" />
			<tarfileset filemode="755" dir="${dist.dir}/linux" includes="*.sh" />
		</tar>

		<!-- ===================================================== -->
		<!-- create a whole archive of /build for transfer to mirrors -->
		<!-- ===================================================== -->
		<tar compression="gzip" destfile="${build.dir}/build.tar.gz">
			<tarfileset dir="${build.dir}" />
			<tarfileset filemode="755" dir="${build.dir}" includes="JavaApplicationStub" />
			<tarfileset filemode="755" dir="${build.dir}" includes="*.exe" />
			<tarfileset filemode="755" dir="${build.dir}" includes="*.sh" />
		</tar>

		<!-- done, move build dir -->
		<delete dir="build" />
		<move file="${build.dir}" tofile="build" />

		<!-- cleanup dist -->
		<delete dir="dist" />
		<delete dir="${dist.dir}/win" />
		<delete dir="${dist.dir}/mac" />
		<delete dir="${dist.dir}/linux" />
		<move file="${dist.dir}" tofile="dist" />
	</target>

</project>
